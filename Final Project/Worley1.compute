#pragma kernel CSMain

    //*************     TO DO 
    //*************  Matirix transform      // cpu vs gpu? 
    //*************  tex to height 
    //*************  landscape shader
    
                  //Extras 
    //************ Vert culling 
                 
                 
RWTexture2D<float4> Result;
float4 points[9]; 

//should really learn buffers
    //buffer of all biomes
    //find 9 closest to rendertarget
    //
    

static half3 Mask[7] = 
    {
	    half3 (1.0, 0.0, 0.0),  //0
        half3(0.0, 1.0, 0.0),   //1
        half3(0.0, 0.0, 1.0),   //2
        half3(1.0, 1.0, 0.0),   //3    //wasn't exe'd -
        half3(0.0, 1.0, 1.0),   //4
        half3(1.0, 0.0, 1.0),   //5
        half3(1.0, 1.0, 1.0)    //6
    };
    
float4 res = float4(256, 256,0,0);  //didnt work when not set by cpu :?
    
float4 getmin(float2 id)
{
	float m_dist = 1.0;
	float dist[9] =
	{
		distance(id, points[0].xy),
        distance(id, points[1].xy),
        distance(id, points[2].xy),
        distance(id, points[3].xy),
        distance(id, points[4].xy),
        distance(id, points[5].xy),
        distance(id, points[6].xy),
        distance(id, points[7].xy),
        distance(id, points[8].xy)
	};
    
	float3 celltype;
    
	for (uint i = 0; i < 8; i++)
	{
		if (dist[i] < m_dist)
		{
			m_dist = dist[i];
			if (i < 6)
			{
				celltype = Mask[i];
			}
			else
			{
				celltype = 0, 0, 0;
			}
		
		}
	}
	return float4(celltype, m_dist);
}

[numthreads(8,8,1)]

void CSMain(uint3 id : SV_DispatchThreadID)
{
	//Result[id.xy] = float4(id.x / res.x, id.y / res.y, 0, 1);
	
	Result[id.xy] = float4(getmin(id.xy / res.xy).rgba);
	//Result[id.xy] = float4(points[res.z].xyz, 1);
    
    
    
    /*
    if   
       (   (pow(((id.x / res.x) - points[0].x), 2)  +
            pow(((id.y / res.y) - points[0].y), 2)  )<  
           (pow(((id.x / res.x) - points[1].x), 2) +
            pow(((id.y / res.y) - points[1].y), 2)  )
       )
	{
		Result[id.xy] = distance(id.xy / res.xy, points[0]);

	} else 
	if   
       (   (pow(((id.x / res.x) - points[1].x), 2)  +
            pow(((id.y / res.y) - points[1].y), 2)  )<  
           (pow(((id.x / res.x) - points[2].x), 2) +
            pow(((id.y / res.y) - points[2].y), 2)  )
       )
	{
		Result[id.xy] = float4(Mask[1], 1);
	} else 
    if   
       (   (pow(((id.x / res.x) - points[2].x), 2)  +
            pow(((id.y / res.y) - points[2].y), 2)  )<  
           (pow(((id.x / res.x) - points[3].x), 2) +
            pow(((id.y / res.y) - points[3].y), 2)  )
       )
	{
		Result[id.xy] = float4(Mask[2], 1);
	} else 
    if   
       (   (pow(((id.x / res.x) - points[3].x), 2)  +
            pow(((id.y / res.y) - points[3].y), 2)  )<  
           (pow(((id.x / res.x) - points[4].x), 2) +
            pow(((id.y / res.y) - points[4].y), 2)  )
       )
	{
		Result[id.xy] = float4(Mask[3], 1);
	} else 
    if   
       (   (pow(((id.x / res.x) - points[4].x), 2)  +
            pow(((id.y / res.y) - points[4].y), 2)  )<  
           (pow(((id.x / res.x) - points[5].x), 2) +
            pow(((id.y / res.y) - points[5].y), 2)  )
       )
	{
		Result[id.xy] = float4(Mask[4], 1);
	} else
    if   
       (   (pow(((id.x / res.x) - points[5].x), 2)  +
            pow(((id.y / res.y) - points[5].y), 2)  )<  
           (pow(((id.x / res.x) - points[6].x), 2) +
            pow(((id.y / res.y) - points[6].y), 2)  )
       )
	{
		Result[id.xy] = float4(Mask[5], 1);
	} else
    if   
       (   (pow(((id.x / res.x) - points[6].x), 2)  +
            pow(((id.y / res.y) - points[6].y), 2)  )<  
           (pow(((id.x / res.x) - points[7].x), 2) +
            pow(((id.y / res.y) - points[7].y), 2)  )
       )
	{
		Result[id.xy] = float4(Mask[6], 1);
	} else if
       ((pow(((id.x / res.x) - points[4].x), 2) +
            pow(((id.y / res.y) - points[4].y), 2)) <
           (pow(((id.x / res.x) - points[5].x), 2) +
            pow(((id.y / res.y) - points[5].y), 2))
       )
	{
		Result[id.xy] = float4(Mask[4], 1);
	}
	else 
    {
		Result[id.xy] = float4(0, 0, 0, 1);
	}*/
    
//

}



/*
        for (int y= -1; y <= 1; y++)            //checks cells surrounding cells 
        {
            for (int x= -1; x <= 1; x++) 
            {
                // Neighbor place in the grid
                float2 neighbor = float2(float(x),float(y));

                // Random position from current + neighbor place in the grid    //replace me with a lookup 
                float2 Point = Custom_create_rand2(i_st + neighbor);            
                
                //sets points to struct, allowing us to access them later.      //doesnt work on the fancy thing
                //points.pointsArr[((y+1)*3)+x+1] = Point;

			    // floattor between the pixel and the point
                float2 diff = neighbor + Point - f_st;

                // Distance to the point
                float dist = length(diff);

                // Keep the closer distance
                m_dist = min(m_dist, dist);
            }
        }

        // Draw the min distance (distance field)
    	Result += float4(m_dist, 0, 0, 0);

        // Draw cell center
        //color += 1.-step(.02, m_dist);

        // Draw grid
        //color.r += step(.98, f_st.x) + step(.98, f_st.y);

        // Show isolines
        // color -= step(.7,abs(sin(27.0*m_dist)))*.5;      //Really fucking cool!

        //Result = float4(color,1.0);                         //changed from gl_FragColor 
        }
//}

// comment me out
/*
inline float2 unity_voronoi_noise_randomVector (float2 UV, float offset)
{
    float2x2 m = float2x2(15.27, 47.63, 99.41, 89.98);
    UV = frac(sin(mul(UV, m)) * 46839.32);
    return float2( 
        sin(UV.y*+offset) *0.5+0.5, 
        cos(UV.x*offset)  *0.5+0.5
        );
}

void Unity_Voronoi_float(float2 UV, float AngleOffset, float CellDensity, out float Out, out float Cells)
{
    float2 g = floor(UV * CellDensity);
    float2 f = frac(UV * CellDensity);
    float t = 8.0;
    float3 res = float3(8.0, 0.0, 0.0);

    for(int y=-1; y<=1; y++)
    {
        for(int x=-1; x<=1; x++)
        {
            float2 lattice = float2(x,y);
            float2 offset = unity_voronoi_noise_randomVector(lattice + g, AngleOffset);
            float d = distance(lattice + offset, f);
            if(d < res.x)
            {
                res = float3(d, offset.x, offset.y);
                Out = res.x;
                Cells = res.y;
            }
        }
    }
*/

/*

float4 WorleyNoise
	(
	float2 UV, float AngleOffset, float CellDensity)
{
	float2 g = floor(UV * CellDensity);
	float2 f = frac(UV * CellDensity);
	float t = 8.0;
	float3 Res = float3(8.0, 0.0, 0.0);
	float Out;
	float3 Cells;

	for (int y = -1.0; y <= 1.0; y++) //cylces through nine points
	{
		for (int x = -1; x <= 1; x++)
		{
			float2 lattice = float2(x, y);
			int i = ((y + 1) * 3) + x + 1;
			float2 offset = points[i]; //Custom_create_rand2(lattice + g , AngleOffset);
			float d = distance(lattice + offset, f);
                        
			if (d < Res.x)
			{
				Res = float3(d, offset.x, offset.y);
				Out = Res.x;
				if (i < 7)
				{
					Cells = Mask[i];
				}
				else
				{
					Cells = float3(0, 0, 0);
				}
                

			}

            //return float4(Out, Cells);
			return float4(x, y, Out, 0);
			
		}

	}
}
*/